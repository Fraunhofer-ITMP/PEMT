[tox]
envlist =
    # always keep coverage-clean first
    coverage-clean
    # code linters/stylers
    manifest
    flake8
    vulture
    #pylint
    pyroma
    # documentation linters/checkers
    doc8
    readme
    docs
    # the actual tests
    py
    # always keep coverage-report last
    coverage-report

[testenv]
passenv = TRAVIS CI CLEP_TESTS
commands = coverage run -p -m pytest --durations=20 {env:PEMT_TESTS:tests}
deps =
    coverage
    pytest
whitelist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:flake8:base]
skip_install = true
deps =
    flake8
    flake8-docstrings>=0.2.7
    flake8-import-order>=0.9
    pep8-naming
    flake8-colors
commands =
    flake8 {posargs:src/pemt/ tests/ setup.py}

[testenv:flake8]
skip_install = true
deps = {[testenv:flake8:base]deps}
commands =
    flake8 src/pemt/ tests/ setup.py

[testenv:vulture]
deps = vulture
skip_install = true
commands = vulture src/pemt/
description = Run the vulture tool to look for dead code.

[testenv:xenon]
deps = xenon
skip_install = true
commands = xenon --max-average A --max-modules A --max-absolute B .
description = Run the xenon tool to monitor code complexity.

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=10 .
description = Run the pyroma tool to check the project's package friendliness.

[testenv:doc8]
basepython = python3
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source/ README.md
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:readme]
commands = markdownlint README.md
skip_install = true
deps =
    pymarkdownlint
    pygments

[testenv:docs]
changedir = docs
deps =
    sphinx
    sphinx_rtd_theme
    sphinx-click
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    sphinx-build -W -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    sphinx-build -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bumpversion {posargs}
skip_install = true
deps =
    bumpversion

[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:finish]
basepython = python3
skip_install = true
whitelist_externals =
    /bin/git
    /usr/local/bin/git
deps =
    {[testenv:build]deps}
    {[testenv:release]deps}
    bumpversion
commands =
    bumpversion release
    {[testenv:release]commands}
    git push
    bumpversion patch
